package addie.tapfwd.blackjack;

import java.util.HashMap;
import java.util.Map;

public class UnicodeCardMapping {

    private static final Map<Card, String> map = new HashMap<>();
    static {
        StringBuilder sb = new StringBuilder();
        String card = sb.appendCodePoint(0x1F0A1).toString();
        map.put(new Card(Card.Suit.SPADE, Card.Rank.ACE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0A2).toString();
        map.put(new Card(Card.Suit.SPADE, Card.Rank.TWO), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0A3).toString();
        map.put(new Card(Card.Suit.SPADE, Card.Rank.THREE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0A4).toString();
        map.put(new Card(Card.Suit.SPADE, Card.Rank.FOUR), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0A5).toString();
        map.put(new Card(Card.Suit.SPADE, Card.Rank.FIVE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0A6).toString();
        map.put(new Card(Card.Suit.SPADE, Card.Rank.SIX), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0A7).toString();
        map.put(new Card(Card.Suit.SPADE, Card.Rank.SEVEN), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0A8).toString();
        map.put(new Card(Card.Suit.SPADE, Card.Rank.EIGHT), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0A9).toString();
        map.put(new Card(Card.Suit.SPADE, Card.Rank.NINE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0AA).toString();
        map.put(new Card(Card.Suit.SPADE, Card.Rank.TEN), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0AB).toString();
        map.put(new Card(Card.Suit.SPADE, Card.Rank.JACK), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0AD).toString();
        map.put(new Card(Card.Suit.SPADE, Card.Rank.QUEEN), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0AE).toString();
        map.put(new Card(Card.Suit.SPADE, Card.Rank.KING), card);

        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0B1).toString();
        map.put(new Card(Card.Suit.HEART, Card.Rank.ACE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0B2).toString();
        map.put(new Card(Card.Suit.HEART, Card.Rank.TWO), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0B3).toString();
        map.put(new Card(Card.Suit.HEART, Card.Rank.THREE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0B4).toString();
        map.put(new Card(Card.Suit.HEART, Card.Rank.FOUR), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0B5).toString();
        map.put(new Card(Card.Suit.HEART, Card.Rank.FIVE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0B6).toString();
        map.put(new Card(Card.Suit.HEART, Card.Rank.SIX), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0B7).toString();
        map.put(new Card(Card.Suit.HEART, Card.Rank.SEVEN), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0B8).toString();
        map.put(new Card(Card.Suit.HEART, Card.Rank.EIGHT), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0B9).toString();
        map.put(new Card(Card.Suit.HEART, Card.Rank.NINE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0BA).toString();
        map.put(new Card(Card.Suit.HEART, Card.Rank.TEN), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0BB).toString();
        map.put(new Card(Card.Suit.HEART, Card.Rank.JACK), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0BD).toString();
        map.put(new Card(Card.Suit.HEART, Card.Rank.QUEEN), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0BE).toString();
        map.put(new Card(Card.Suit.HEART, Card.Rank.KING), card);

        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0C1).toString();
        map.put(new Card(Card.Suit.DIAMOND, Card.Rank.ACE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0C2).toString();
        map.put(new Card(Card.Suit.DIAMOND, Card.Rank.TWO), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0C3).toString();
        map.put(new Card(Card.Suit.DIAMOND, Card.Rank.THREE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0C4).toString();
        map.put(new Card(Card.Suit.DIAMOND, Card.Rank.FOUR), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0C5).toString();
        map.put(new Card(Card.Suit.DIAMOND, Card.Rank.FIVE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0C6).toString();
        map.put(new Card(Card.Suit.DIAMOND, Card.Rank.SIX), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0C7).toString();
        map.put(new Card(Card.Suit.DIAMOND, Card.Rank.SEVEN), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0C8).toString();
        map.put(new Card(Card.Suit.DIAMOND, Card.Rank.EIGHT), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0C9).toString();
        map.put(new Card(Card.Suit.DIAMOND, Card.Rank.NINE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0CA).toString();
        map.put(new Card(Card.Suit.DIAMOND, Card.Rank.TEN), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0CB).toString();
        map.put(new Card(Card.Suit.DIAMOND, Card.Rank.JACK), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0CD).toString();
        map.put(new Card(Card.Suit.DIAMOND, Card.Rank.QUEEN), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0CE).toString();
        map.put(new Card(Card.Suit.DIAMOND, Card.Rank.KING), card);

        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0D1).toString();
        map.put(new Card(Card.Suit.CLUB, Card.Rank.ACE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0D2).toString();
        map.put(new Card(Card.Suit.CLUB, Card.Rank.TWO), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0D3).toString();
        map.put(new Card(Card.Suit.CLUB, Card.Rank.THREE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0D4).toString();
        map.put(new Card(Card.Suit.CLUB, Card.Rank.FOUR), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0D5).toString();
        map.put(new Card(Card.Suit.CLUB, Card.Rank.FIVE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0D6).toString();
        map.put(new Card(Card.Suit.CLUB, Card.Rank.SIX), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0D7).toString();
        map.put(new Card(Card.Suit.CLUB, Card.Rank.SEVEN), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0D8).toString();
        map.put(new Card(Card.Suit.CLUB, Card.Rank.EIGHT), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0D9).toString();
        map.put(new Card(Card.Suit.CLUB, Card.Rank.NINE), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0DA).toString();
        map.put(new Card(Card.Suit.CLUB, Card.Rank.TEN), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0DB).toString();
        map.put(new Card(Card.Suit.CLUB, Card.Rank.JACK), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0DD).toString();
        map.put(new Card(Card.Suit.CLUB, Card.Rank.QUEEN), card);
        sb = new StringBuilder();
        card = sb.appendCodePoint(0x1F0DE).toString();
        map.put(new Card(Card.Suit.CLUB, Card.Rank.KING), card);
    }

    public static String getCard(Card card) {
        return map.get(card);
    }
}
